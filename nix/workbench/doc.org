* Key entry/intermediate points
*** =Makefile= /convenience/
    - all workbench shell targets [[file:~/cardano-node/Makefile::$(eval $(call define_profile_targets,$(SHELL_PROFILES)))]]
      - define_profile_targets [[file:~/cardano-node/lib.mk::define define_profile_targets]]
        - proftgt [[file:~/cardano-node/lib.mk::$(1): shell]]
          - shell [[file:~/cardano-node/Makefile::shell: ## Nix shell, (workbench from /nix/store), vars: PROFILE, CMD, RUN]]
            - =Makefile= -> Nix =workbench-shell= [[file:~/cardano-node/Makefile::nix-shell -A 'workbench-shell' --max-jobs 256 --cores 256 --show-trace --argstr profileName ${PROFILE} --argstr backendName ${BACKEND} ${ARGS} ${if ${CMD},--command "${CMD}"} ${if ${RUN},--run "${RUN}"}]]
*** =start-cluster= /shell script available inside workbench shell/
    - workbench-interactive-start [[file:backend/runner.nix::workbench-interactive-start = pkgs.writeScriptBin "start-cluster" '']]
*** =workbench-shell= /Nix attribute implementing the workbench shell/
    - workbench-shell [[file:~/cardano-node/shell.nix::workbench-shell =]]
      - workbench-runner [[file:~/cardano-node/nix/pkgs.nix::workbench-runner =]]
        - nomad.nix      [[file:backend/nomad.nix::name = "nomad";]]
        - supervisor.nix [[file:backend/supervisor.nix::name = "supervisor";]]
        - workbench-interactive-start [[file:backend/runner.nix::workbench-interactive-start = pkgs.writeScriptBin "start-cluster" '']]
      - profileData [[file:shell.nix::inherit (workbench-runner) profileName profileData backend;]]
        - materialise-profile [[file:profile/profile.nix::materialise-profile =]]
      - shellHook [[file:shell.nix::shellHook = { profileName, backend, profiled, workbenchDevMode, withMainnet }: '']]
*** =workbench.materialise-profile= /aka profileData/
    - materialise-profile [[file:profile/profile.nix::materialise-profile =]]
      - profile [[file:profile/profile.nix::profile = { profileName]]
      - profileData [[file:profile/profile.nix::profileData = { profile }:]]
*** workbench CI jobs  /from Cicero, but can be invoked via Makefile/
    - =make workbench-ci-test= [[file:~/cardano-node/nix.mk::nix build --out-link result-ci-test '.#hydraJobs.native.workbench-ci-test' --cores 0]]
      - workbench-ci-test [[file:~/cardano-node/flake.nix::workbench-ci-test =]]
        - workbench-profile-run [[file:backend/runner.nix::workbench-profile-run =]]
          - profileData [[file:backend/runner.nix::profileData = workbench.materialise-profile]]
          - backendNix [[file:backend/runner.nix::backendNix = backend.materialise-profile]]
